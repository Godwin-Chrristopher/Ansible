# perform_single_cpu_poll.yml
# This file performs ONE CPU poll and updates the ServiceNow incident with its results.

- name: Get current CPU usage on {{ current_incident_item.hostname }} (Poll {{ current_poll_iteration }}/{{ poll_count }})
  win_shell: |
    try {
        $cpu = [math]::Round((Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue, 2)
        #$cpu = "95"
        Write-Output "$cpu"
    } catch {
        Write-Error "Failed to get CPU usage: $($_.Exception.Message)"
        exit 1 # Exit with error code to indicate failure
    }
  register: current_cpu_poll_result
  delegate_to: "{{ current_incident_item.hostname }}.mcjunkinredman.com"
  ignore_errors: true # Allow individual polls to fail without stopping the sequence

- name: Get current CPU top processes on {{ current_incident_item.hostname }} (Poll {{ current_poll_iteration }}/{{ poll_count }})
  win_shell: |
        try {
            $TOP_PROCESS = Get-Process | Sort-Object -Property CPU -Descending |
              Select-Object -First 10 @{Name="ProcessName";Expression={$_.ProcessName}},
              @{Name="CPU";Expression={[math]::Round($_.CPU, 2)}},
              @{Name="MemoryMB";Expression={[math]::Round($_.WorkingSet64 / 1MB, 2)}} 

            $CPUuti = "Average: {{ cpu_avg | default('N/A') }}%"
            $CPUPER = "Max: {{ cpu_max | default('N/A') }}%"


            $tableRows = $TOP_PROCESS | ForEach-Object {
              "<tr><td>$($_.ProcessName)</td><td>$($_.CPU)</td><td>$($_.MemoryMB)</td></tr>"
            }

            $HTMLBody = "
            <html>
            <head>
            <style>
            body { font-family: 'Segoe UI', Tahoma, sans-serif; background: #f4f4f4; }
            .container { max-width: 700px; margin: 30px auto; padding: 25px; background: white; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
            h2 { color: #2c3e50; }
            p { font-size: 16px; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 12px; }
            th { background-color: #3498db; color: white; }
            tr:nth-child(even) { background-color: #f9f9f9; }
            tr:hover { background-color: #f1f1f1; }
            </style>
            </head>
            <body>
            <div class='container'>
            <h2>CPU Utilization Report for {{ current_incident_item.hostname }}</h2>
            <h3>Top 10 CPU Utilized Processes</h3>
            <table>
            <tr>
            <th>Process Name</th>
            <th>CPU Time</th>
            <th>Memory Usage (MB)</th>
            </tr>
            $tableRows
            </table>
            </div>
            </body>
            </html>
            "
            Write-Output "$HTMLBody"
        } catch {
            Write-Error "Failed to get top processes: $($_.Exception.Message)"
            exit 1 # Exit with error code to indicate failure
        }
  register: current_cpu_top_result
  delegate_to: "{{ current_incident_item.hostname }}.mcjunkinredman.com"
  ignore_errors: true # Allow individual commands to fail

- name: Set poll-specific comment message for incident {{ current_incident_item.incident_number }}
  set_fact:
    poll_comment_message: |
      Automated Poll Update {{ current_poll_iteration }}/{{ poll_count }}:
      Current CPU on {{ current_incident_item.hostname }}: {{ current_cpu_poll_result.stdout | default('N/A') }}%.
      Top processes:
      [code]
      {{ current_cpu_top_result.stdout | default('Failed to retrieve top processes for this poll.') }}
      [/code]

- name: Update ServiceNow incident {{ current_incident_item.incident_number }} with poll details
  uri:
    url: "https://mrcglobaltest.service-now.com/api/now/table/incident/{{ current_incident_item.sys_id }}"
    method: PATCH
    user: "{{ servicenow_user }}"
    password: "{{ servicenow_password }}"
    force_basic_auth: yes
    body_format: json
    headers:
      Content-Type: "application/json"
    body:
      comments: "{{ poll_comment_message }}"
  register: servicenow_poll_update_result
  failed_when: servicenow_poll_update_result.status not in [200, 201, 202, 204]
  ignore_errors: true # Ensure the playbook continues even if this specific update fails

# Crucial: Add the current poll's raw CPU data to a list for later average/max calculation
- name: Store current poll data for aggregation
  set_fact:
    # Append the current CPU value (converted to int, default to 0 if failed)
    # to the cpu_values list. Initialize if it's the first poll.
    cpu_values_per_poll: "{{ cpu_values_per_poll | default([]) + [current_cpu_poll_result.stdout | default(0) | int] }}"
  delegate_to: localhost # This set_fact must run on the controller
  run_once: true # Ensure this doesn't create duplicate entries if delegated multiple times (though delegate_to should handle this)
  # The when condition here ensures we only append if a value was actually retrieved, or at least a default of 0 is used.
  when: current_cpu_poll_result.stdout is defined or current_cpu_poll_result.failed is defined
